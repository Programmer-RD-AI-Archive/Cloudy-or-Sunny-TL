# -*- coding: utf-8 -*-
"""00-main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z9LbZy_YF2IsWkmJiN8m2jWtvpVqFWze
"""

import tensorflow as tf
import tensorflow_hub as hub

!nvidia-smi

!unzip /content/drive/MyDrive/Colab\ Notebooks/Projects/TensorFlow/Todo/CNN/Sunny-or-Cloudy/data.zip

import pandas as pd

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

import os
import random

type_of_data = random.choice(['train','test'])
type_of_class = random.choice(['sunny','cloudy'])
file_name = random.choice(os.listdir(f'{type_of_data}/{type_of_class}/'))
img = mpimg.imread(f'{type_of_data}/{type_of_class}/{file_name}')
img = img / 255.0
plt.figure(figsize=(10,7))
plt.imshow(img)
plt.axis(False)
plt.title(f'Shape : {img.shape} | Class Name : {type_of_class} | Type of Data : {type_of_data}')
plt.show();

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1/255.0,rotation_range=0.25,width_shift_range=0.25,height_shift_range=0.25,shear_range=0.25,zoom_range=0.25,horizontal_flip=True,vertical_flip=True,validation_split=0.75)
test_datagen = ImageDataGenerator(rescale=1/255.0)

test_data = test_datagen.flow_from_directory('test/',target_size=(224,224),class_mode='binary')
train_data = train_datagen.flow_from_directory('train/',target_size=(224,224),class_mode='binary')

"""## Modelling"""

models_to_try = [
    # ['efficentnetb2','https://tfhub.dev/tensorflow/efficientnet/b2/feature-vector/1'],
    # ['efficentnetb7','https://tfhub.dev/tensorflow/efficientnet/b7/feature-vector/1'],
    # ['efficentnetb5','https://tfhub.dev/tensorflow/efficientnet/b5/feature-vector/1'],
    # ['efficentnetb0','https://tfhub.dev/tensorflow/efficientnet/b0/feature-vector/1'],
    # ['efficentnetb4','https://tfhub.dev/tensorflow/efficientnet/b4/feature-vector/1'],
    # ['efficentnetb3','https://tfhub.dev/tensorflow/efficientnet/b3/feature-vector/1'],
    # ['efficentnetb1','https://tfhub.dev/tensorflow/efficientnet/b1/feature-vector/1'],
    # ['efficentnetb6','https://tfhub.dev/tensorflow/efficientnet/b6/feature-vector/1'],
    # ['resnet50','https://tfhub.dev/tensorflow/resnet_50/feature_vector/1'],
    # ['resnet_v2_152','https://tfhub.dev/google/imagenet/resnet_v2_152/feature_vector/4'],
    # ['resnet_v1_152','https://tfhub.dev/google/imagenet/resnet_v1_152/feature_vector/4'],
    # ['resnet_v1_50','https://tfhub.dev/google/imagenet/resnet_v1_50/feature_vector/4'],
    # ['resnet_v1_101','https://tfhub.dev/google/imagenet/resnet_v1_101/feature_vector/4'],
    # ['amiebanet_a_n18_f448','https://tfhub.dev/google/imagenet/amoebanet_a_n18_f448/feature_vector/1'],
    # ['inception_resnet_v2','https://tfhub.dev/google/imagenet/inception_resnet_v2/feature_vector/4'],
    # ['inception_v1','https://tfhub.dev/google/imagenet/inception_v1/feature_vector/4'],
    # ['inception_v3','https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4'],
    # ['nasnet_large','https://tfhub.dev/google/imagenet/nasnet_large/feature_vector/4'],
    # ['nasnet_mobile','https://tfhub.dev/google/imagenet/nasnet_mobile/feature_vector/4']
]

!pip3 install wandb

import wandb
from wandb.keras import *

# for model_to_try in models_to_try:
#   print('-'*100)
#   print(model_to_try[0])
#   print('-'*100)
#   wandb.init(project="Sunny-or-Cloudy",name=f"{model_to_try[0]}-0")
#   model = tf.keras.Sequential([
#     hub.KerasLayer(model_to_try[1],input_shape=(224,224,3)),
#     tf.keras.layers.Dense(1,activation='sigmoid')
#   ])
#   model.compile(loss=tf.keras.losses.BinaryCrossentropy(),metrics=['accuracy'],optimizer=tf.keras.optimizers.Adam())
#   model.fit(train_data,validation_data=(test_data),epochs=5,callbacks=[WandbCallback()])

!nvidia-smi

"""## Results

#### Best `loss` = resnet50
#### Best `val loss` = resnet_v1_101 / resnet50 / efficentnetb1
#### Best `accuracy` = resnet50
#### Best `val accuracy` = resnet50

"""

# resnet50 wins !!

model_url = "https://tfhub.dev/tensorflow/resnet_50/feature_vector/1"
wandb.init(project="Sunny-or-Cloudy",name=f"resnet-big-dog-model")
model = tf.keras.Sequential([
  hub.KerasLayer(model_url,input_shape=(224,224,3)),
  tf.keras.layers.Dense(1,activation='sigmoid')
])
model.compile(loss=tf.keras.losses.BinaryCrossentropy(),metrics=['accuracy'],optimizer=tf.keras.optimizers.Adam())
model.fit(train_data,validation_data=(test_data),epochs=100,callbacks=[WandbCallback(),tf.keras.callbacks.EarlyStopping(patience=5)])
model.save('/content/drive/MyDrive/Colab Notebooks/Projects/TensorFlow/Todo/CNN/Sunny-or-Cloudy/model-1.h5')

imgs = os.listdir('/content/testing-imgs')

imgs

class_names = ['cloudy','sunny']

class_names

for img in imgs:
  img = tf.io.read_file(f'/content/testing-imgs/{img}')
  img = tf.io.decode_jpeg(img)
  img = tf.image.resize(size=(224,224),images=img)
  img = img / 255.0
  preds = model.predict(tf.expand_dims(img,axis=0))
  plt.figure(figsize=(10,7))
  plt.imshow(img)
  plt.axis(False)
  plt.title(f'{class_names[int(tf.squeeze(tf.round(preds)))]}')
  plt.show();

